{"version":3,"sources":["components/CategoriasAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoriasAdd","setCategorias","useState","inputCategoria","setInputCategoria","onSubmit","elemento","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","imagenes","loading","estado","setEstado","useEffect","then","useFetchGifs","imagen","key","GifExpertApp","titulo","divRoot","document","querySelector","ReactDOM","render"],"mappings":"qMA0DeA,EA/CO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAGMC,mBAAS,IAHf,mBAGjCC,EAHiC,KAGhBC,EAHgB,KA8BzC,OACI,0BAAMC,SAnBgB,SAACC,GAEvBA,EAASC,iBAGLJ,EAAeK,OAAOC,OAAS,IAK/BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAuBO,OAEhDN,EAAmB,OASnB,2BACIO,KAAK,OACLC,MAAQT,EACRU,SA9BmB,SAACP,GAE5BF,EAAkBE,EAASQ,OAAOF,Y,uBClB7BG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAKAI,MAAQF,GALR,cAKbG,EALa,gBAOAA,EAAKC,OAPL,cAObC,EAPa,OAUbC,EAAOD,EAAKA,KAAKE,KAAK,SAAAC,GAAQ,IAAD,EAG/B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAhBvB,kBAoBZM,GApBY,2CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,yBAAKc,UAAU,4CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCEJO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAAgB,ECAd,SAAEA,GAAc,MAKZd,mBAAS,CACjCkC,SAAU,GACVC,SAAS,IAP2B,mBAKjCC,EALiC,KAKzBC,EALyB,KAuBxC,OATAC,qBAAW,WAIPzB,EAAQC,GACPyB,MAAM,SAAAL,GAAQ,OAAIG,EAAW,CAAEH,SAAUA,EAAUC,SAAS,SAC/D,CAAErB,IAGGsB,EDpBsBI,CAAc1B,GAAnCoB,EAH8B,EAG9BA,SAAUC,EAHoB,EAGpBA,QAMlB,OACI,oCACA,4BAAMrB,GACJqB,EAAU,0CAAqB,KACjC,yBAAKL,UAAU,aAEPI,EAASX,KAAK,SAAAkB,GAAM,OAChB,kBAAC,EAAD,eACAC,IAAMD,EAAOhB,IACRgB,UE0CVE,EAnDM,SAAC,GAAgB,EAAbC,OAAc,IAAD,EAKK5C,mBAAS,CAAC,gBALf,mBAK1BQ,EAL0B,KAKbT,EALa,KAqBlC,OAAQ,oCACJ,4CACA,kBAAC,EAAD,CAAeA,cAAgBA,IAC/B,6BAEA,4BAKQS,EAAWe,KAAK,SAAAT,GACZ,OAAO,kBAAC,EAAD,CACH4B,IAAM5B,EACNA,UAAYA,UCxC9B+B,G,MAAUC,SAASC,cAAc,SAKvCC,IAASC,OAAQ,kBAAC,EAAD,MAAmBJ,I","file":"static/js/main.d9dcdeb0.chunk.js","sourcesContent":["//rafc + TAB crea el codigo base del componente\n\n//importacion de react para usar hooks useState\nimport React, { useState } from 'react'\n\n//libreria con herramientas para validar argumentos props\nimport PropTypes from 'prop-types';\n\n//creamos un componente para complementar la app\n//un componente es una parte de la app\n//recibimos un props con la funcion del otro componente para agregar categorias\nconst CategoriasAdd = ({ setCategorias }) => {\n\n    //creamos un hook para controlar el valor del input text\n    const [ inputCategoria , setInputCategoria ] = useState('');\n\n    //creamos un evento para extraer el valor del input en onChange\n    const onChangeInputCategoria = (elemento) => {\n        //cada que cambia el valor del input por el usuario se actualizar el hook\n        setInputCategoria(elemento.target.value);        \n    }\n\n    //creamos otro evento para controlar cuando el usuario presiona Enter\n    const onSubmitCategoria = (elemento) => {\n        //Evitamos que se actualize todo el formulario por defecto\n        elemento.preventDefault();\n\n        //antes de agregar la categoria hacemos validaciones\n        if (inputCategoria.trim().length > 2){\n            //Agregamos la categoria del hook del otro componente\n            //como no tenemos acceso al arreglo de categorias hacemos uso de la \n            //funcion callback que trae el valor de dicas categorias para agregar\n            //el elemento nuevo con el valor del hook del input\n            setCategorias( categorias => [inputCategoria,...categorias]);\n            //borramos el contenido del input\n            setInputCategoria ('');\n        }\n    }\n\n    //si regreso un componente form al hacer un enter refresca la pagina auntomaticamente\n    //asi que desactivamos esa funcion por defecto y la asignamos a nuestra funcion\n    return (    \n        <form onSubmit={ onSubmitCategoria }>\n            {/*Cuando se aplica un valor hook al input se debe emplear el metodo onChange */}\n            <input\n                type=\"text\"\n                value={ inputCategoria }\n                onChange={ onChangeInputCategoria }\n            />\n        </form>\n    )\n}\n\n//usando proptypes declaramos las properties que son obligatorias y su tipo\nCategoriasAdd.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}\n\nexport default CategoriasAdd;","//creamos un funcion para obtener imagenes por categoria\nexport const getGifs = async( categoria ) => {\n    //ruta generada para obtener 10 imagenes de ghipy\n    //encodeURI reemplaza los espacios por %20 y arregla la cadena para una url\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=HFalvsKMf0YuOCiIDUqA3yamw6pzllMT`;\n    //invocamos la respuesta usando fetch\n    const resp = await fetch ( url );\n    //convertimos la respues a formato json\n    const data = await resp.json();\n    //extraemos solo la informacion de la imagen necesaria de la respuesta\n    //map recorre el arreglo para regresar cada elemento dentro de el\n    const gifs = data.data.map( img => {\n        //regresamos la ruta de la imagen para generar un objeto de imagenes\n        //solo con los datos necesarios para la aplicacion\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url \n        }\n    });\n\n    return gifs;\n}","import React from 'react'\n\n//recibimos en las props todas las propiedes de la imagen y las destructuramos\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__backInUp\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    )\n}","//rafc + TAB crea el esquema estandar de un componente\n\n//importamos useState para generar variables hooks\n//importamos useEffect para ejecutar funciones de manera condicial\nimport React from 'react'\n\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ categoria }) => {\n\n    //usamos nuestro custom hook destructurando el objeto que regresa data[],loading}\n    const { imagenes, loading} = useFetchGifs( categoria );\n\n    //devolvemos un nuevo componente al que enviamos la imagen\n    //enviamos todas las propiedades como un props al nuevo componente\n    //usando nuestro custom hook enviaremos la informacion de carga \n    //que se actualizara automaticamente al hacer set al custom hook\n    return (\n        <>\n        <h3>{ categoria }</h3>\n        { loading ? <p>Cargando...</p> : null}\n        <div className=\"card-grid\">\n            {\n                imagenes.map( imagen => (\n                    <GifGridItem \n                    key={ imagen.id } \n                    { ...imagen } \n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n","//CREAMOS UN CUSTOM HOOK \n//La diferencia entre un hook y un functional component es que no regresamos \n//nada en JSX <h1>Hello, {name}</h1>; JSX son elementos HTML con javascript\n//por lo tanto no necesitamos importar react\n//funcionan igual que los functional componentes \n\nimport { useState, useEffect } from \"react\"\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( categoria ) =>{\n    //creamos un estado para indicarle a otros componentes cuando se debe\n    //renderizar porque algo cambio en este caso vamos a cargar en la\n    //variable loading true para indicar cuando se ejecute \n    //y cuando termine de cargar cambiaremos a false\n    const [estado, setEstado] = useState({\n        imagenes: [],\n        loading: true\n    });\n\n    //usando useEffects condicionaremos la ejecucion de obtencion de Gifs\n    //solo se dispara una vez al invocar el componente\n    //el segundo parametro es una lista de dependencias en este caso\n    //se manda la categoria porque la funcion contiene el uso de la misma\n    useEffect( () => {\n        //la funcion getGifs() se encuentra en helpers y son funciones \n        //de ayuda a los componentes que no estan dentro del componente\n        //como es una funcion promesa se usa .then \n        getGifs(categoria)\n        .then( imagenes => setEstado ({ imagenes: imagenes, loading: false}));\n    },[ categoria ]);\n    \n\n    return estado; //el return es un objeto {data[],loading}\n}","//FC FUNCTIONAL COMPONENTS O BIEN COMPONENTES EN FUNCIONES\n\n/* \nAPP QUE SE COMUNICA CON OTRO COPONENTE PARA CARGAR CATEGORIAS\nY A SU VEZ CONTINE OTRO COMPONENTE POR CADA CATEGORIA CREADA\n*/\n\n//libreria para poder crear elementos html usando javascript\n//Adicionalmente por destructuracion sacamos el hook useState\n//todo los que empieza con use es un hook\n//HOOKS SON VARIABLES QUE SI SON ASIGNADAS A UN ELEMENTO HTML \n//Y SON CAMBIADAS A TRAVEZ DE SU FUNCION SET EL DOCUMENTO SE ACTUALIZA AUTOMATICAMENTE\nimport React, {useState} from 'react';\n\n//Componente creado para agregar categorias\nimport CategoriasAdd from './components/CategoriasAdd';\nimport { GifGrid } from './components/GifGrid';\n\n//Creamos el componente FC\nconst GifExpertApp = ( { titulo} ) => {\n\n\n    //creamos un componente state que por destructuracion genera un arreglo con un valor y una funcion\n    //le asignamos un arreglo para agregar categorias de la app\n    const [ categorias , setCategorias ] = useState(['Dragon Ball']);\n\n    /*\n    //creamos la funcion que se ejecutara al hacer click al boton\n    const onClickAgregar = (e) => {\n        //para cambiar el valor de una variable hook se debe hacer a travez de la funcion set\n        //al cambiar el valor de una variable hook, react renderiza el documento automaticamente\n        //se debe enviar el nuevo valor de la variable como parametro al set\n        //cuando se usa setCategories reescribes completamente el valor del hook \n        //con lo que se manda como parametro, por eso enviamos una copia usando spred mas la nueva\n        setCategorias( [...categorias,'Bleach']); \n    } \n    */\n\n    //enviamos un titulo con la lista de categorias de regreso\n    //tambien agregamos un componente para agregar categorias enviando el set del hook\n    return (<>\n        <h2>GifExpertApp</h2>\n        <CategoriasAdd setCategorias={ setCategorias }/>\n        <hr />\n   \n        <ol>\n            {/*Para mostrar los elementos del arreglo como lista*/}\n            {/*Usamos una expresion que regrese un valor directamente del arreglo conmo map*/}\n            {/*map es una funcion callback que recorre todo el arreglo*/}\n            {\n                categorias.map( categoria => {\n                    return <GifGrid\n                        key={ categoria } \n                        categoria={ categoria } \n                    />\n                })\n            }\n        </ol>\n    </>);\n}\n/*\n//usando proptypes declaramos las properties que son obligatorias y su tipo\nGifExpertApp.propTypes = {\n    //titulo: PropTypes.string.isRequired\n}\n//declarando valores por defecto\nGifExpertAppdefaultProps = {\n    //subtitulo: 'Subtitulo por default'\n}\n*/\nexport default GifExpertApp;","//libreria para poder crear elementos html usando javascript\nimport React from 'react';\n//libreria para manipular los elementos html del documento html\nimport ReactDOM from 'react-dom';\n\n//importamos el componente que creamos \nimport GifExpertApp  from './GifExpertApp';\n\n//importamos la plantilla css\nimport './index.css';\n\n//referenciamos el <div id=\"app\"></div> del documento principal index.html\n//para poder hacer esta referencia se requiere importar el react-dom\nconst divRoot = document.querySelector('#app');\n\n//enviamos el componente de saludo al documento usando ReactDOM\n//los componentes de react se deben enviar con <>\n//si deseo enviar properties al componente debo agregarlos despues del nombre de la app\nReactDOM.render( <GifExpertApp /> , divRoot );\n"],"sourceRoot":""}